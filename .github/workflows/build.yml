name: Build
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    # nothing here

env:
  BUILD_DIR: '${{github.workspace}}/build'
  QT_VERSION_VPKEDIT: '6.6.3'
  QT_VERSION_STRATASOURCE: '6.5.3'
  QT_MODULES: 'qtimageformats'

jobs:
  build-windows:
    strategy:
      matrix:
        build_type: [Release]
        compiler: [msvc]
        target: [VPKEdit]
    runs-on: windows-latest
    defaults:
      run:
        shell: cmd
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
          spectre: true

      - name: Install Qt [target:VPKEdit]
        if: ${{matrix.target == 'VPKEdit'}}
        uses: jurplel/install-qt-action@v3
        with:
          aqtversion: '==3.1.*'
          version: '${{env.QT_VERSION_VPKEDIT}}'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_msvc2019_64'
          dir: '${{github.workspace}}/qt'
          modules: ${{env.QT_MODULES}}
          cache: true

      - name: Install Qt [target:StrataSource]
        if: ${{matrix.target == 'StrataSource'}}
        uses: jurplel/install-qt-action@v3
        with:
          aqtversion: '==3.1.*'
          version: '${{env.QT_VERSION_STRATASOURCE}}'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_msvc2019_64'
          dir: '${{github.workspace}}/qt'
          modules: ${{env.QT_MODULES}}
          cache: true

      - name: Configure CMake [target:VPKEdit]
        if: ${{matrix.target == 'VPKEdit'}}
        run: cmake -G "Ninja" -B "${{env.BUILD_DIR}}" -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DQT_BASEDIR="${{github.workspace}}/qt/Qt/${{env.QT_VERSION_VPKEDIT}}/msvc2019_64" -DVPKEDIT_USE_LTO=ON

      - name: Configure CMake [target:StrataSource]
        if: ${{matrix.target == 'StrataSource'}}
        run: cmake -G "Ninja" -B "${{env.BUILD_DIR}}" -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DQT_BASEDIR="${{github.workspace}}/qt/Qt/${{env.QT_VERSION_STRATASOURCE}}/msvc2019_64" -DVPKEDIT_BUILD_FOR_STRATA_SOURCE=ON -DVPKEDIT_USE_LTO=ON

      - name: Build Binaries
        working-directory: '${{env.BUILD_DIR}}'
        run: |
          cmake --build . --config ${{matrix.build_type}} -t vpkeditcli -- -j%NUMBER_OF_PROCESSORS%
          cmake --build . --config ${{matrix.build_type}} -t vpkedit -- -j%NUMBER_OF_PROCESSORS%
      
      # - name: Archive Standalone CLI [target:VPKEdit]
      #   if: ${{matrix.target == 'VPKEdit'}}
      #   shell: pwsh
      #   run: |
      #     Compress-Archive -Path `
      #     ${{env.BUILD_DIR}}/CREDITS.md, `
      #     ${{env.BUILD_DIR}}/LICENSE, `
      #     ${{env.BUILD_DIR}}/vpkeditcli.exe `
      #     -DestinationPath ${{matrix.target}}-Windows-Standalone-CLI-${{matrix.compiler}}-${{matrix.build_type}}.zip

      # - name: Upload Standalone CLI [target:VPKEdit]
      #   if: ${{matrix.target == 'VPKEdit'}}
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: '${{matrix.target}}-Windows-Standalone-CLI-${{matrix.compiler}}-${{matrix.build_type}}'
      #     path: |
      #       ${{matrix.target}}-Windows-Standalone-CLI-${{matrix.compiler}}-${{matrix.build_type}}.zip
      #     retention-days: 7

      # - name: Upload Release Test
      #   if: ${{matrix.build_type == 'Release' && matrix.target == 'VPKEdit'}}
      #   uses: softprops/action-gh-release@v2
      #   with:
      #     files: | 
      #       ${{matrix.target}}-Windows-Standalone-CLI-${{matrix.compiler}}-${{matrix.build_type}}.zip
      #     tag_name: draft
      #     draft: true

      - name: Test Zip Action
        uses: vimtor/action-zip@v1.2
        with:
          files: build/CREDITS.md
          dest: new.zip
      
      - name: whereami
        run: dir

      - name: Test Multi Zip Action
        uses: vimtor/action-zip@v1.2
        with:
          files: |
            build/CREDITS.md
            build/LICENSE
            build/vpkedit.exe `
            build//*.dll
            build/imageformats/*.dll
            build/platforms/*.dll
            build/styles/*.dll
            build/tls/*.dll
          dest: result.zip

      - name: Archive Standalone GUI [target:VPKEdit]
        if: ${{matrix.target == 'VPKEdit'}}
        shell: pwsh
        run: |
          Compress-Archive -Path `
          ${{env.BUILD_DIR}}/CREDITS.md, `
          ${{env.BUILD_DIR}}/LICENSE, `
          ${{env.BUILD_DIR}}/vpkedit.exe, `
          ${{env.BUILD_DIR}}/*.dll, `
          ${{env.BUILD_DIR}}/imageformats/*.dll, `
          ${{env.BUILD_DIR}}/platforms/*.dll, `
          ${{env.BUILD_DIR}}/styles/*.dll, `
          ${{env.BUILD_DIR}}/tls/*.dll `
          -DestinationPath ${{matrix.target}}-Windows-Standalone-GUI-${{matrix.compiler}}-${{matrix.build_type}}.zip
          
      - name: Upload Standalone GUI [target:VPKEdit]
        if: ${{matrix.target == 'VPKEdit'}}
        uses: actions/upload-artifact@v4
        with:
          name: '${{matrix.target}}-Windows-Standalone-GUI-${{matrix.compiler}}-${{matrix.build_type}}'
          path: |
            ${{matrix.target}}-Windows-Standalone-GUI-${{matrix.compiler}}-${{matrix.build_type}}.zip
          retention-days: 7

      - name: Upload Standalone GUI test [target:VPKEdit]
        if: ${{matrix.target == 'VPKEdit'}}
        uses: actions/upload-artifact@v4
        with:
          name: result
          path: |
            result.zip
          retention-days: 7

      - name: Upload Standalone GUI test [target:VPKEdit]
        if: ${{matrix.target == 'VPKEdit'}}
        uses: actions/upload-artifact@v4
        with:
          name: result
          path: |
            new.zip
          retention-days: 7


      - name: Upload Release Test
        if: ${{matrix.build_type == 'Release' && matrix.target == 'VPKEdit'}}
        uses: softprops/action-gh-release@v2
        with:
          files: | 
            ${{matrix.target}}-Windows-Standalone-GUI-${{matrix.compiler}}-${{matrix.build_type}}.zip
            result.zip
            new.zip
          tag_name: draft-actions
          draft: true


      # - name: Archive Standalone CLI/GUI [target:StrataSource]
      #   if: ${{matrix.target == 'StrataSource'}}
      #   shell: bash
      #   run: |
      #     cd ${{env.BUILD_DIR}}
      #     zip -9 ${{matrix.target}}-Windows-Binaries-${{matrix.compiler}}-${{matrix.build_type}}.zip \
      #       vpkeditcli.exe \
      #       vpkedit.exe 
            

      # - name: Upload Standalone CLI/GUI [target:StrataSource]
      #   if: ${{matrix.target == 'StrataSource'}}
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: '${{matrix.target}}-Windows-Binaries-${{matrix.compiler}}-${{matrix.build_type}}'
      #     path: |
      #       ${{matrix.target}}-Windows-Binaries-${{matrix.compiler}}-${{matrix.build_type}}.zip
      #     retention-days: 7

      # - name: Create Installer [target:VPKEdit]
      #   if: ${{matrix.target == 'VPKEdit'}}
      #   working-directory: ${{env.BUILD_DIR}}
      #   run: cpack

      # - name: Archive Installer [target:VPKEdit]
      #   if: ${{matrix.target == 'VPKEdit'}}
      #   shell: bash
      #   run: |
      #     cd ${{env.BUILD_DIR}}
      #     zip -9 ${{matrix.target}}-Windows-Installer-${{matrix.compiler}}-${{matrix.build_type}}.zip \ 
      #       VPKEdit-*-win64.exe 
            

      # - name: Upload Installer [target:VPKEdit]
      #   if: ${{matrix.target == 'VPKEdit'}}
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: '${{matrix.target}}-Windows-Installer-${{matrix.compiler}}-${{matrix.build_type}}'
      #     path: |
      #       ${{matrix.target}}-Windows-Installer-${{matrix.compiler}}-${{matrix.build_type}}.zip
      #     retention-days: 7

      # - name: Create Standalone Compatibility GUI [build_type:Release][target:VPKEdit]
      #   if: ${{matrix.build_type == 'Release' && matrix.target == 'VPKEdit'}}
      #   working-directory: ${{env.BUILD_DIR}}
      #   run: |
      #     curl -L -o "__qt__.7z" "https://github.com/crystalidea/qt6windows7/releases/download/v${{env.QT_VERSION_VPKEDIT}}/qt6_x64_to_run_on_windows7.7z"
      #     7z x __qt__.7z -o__qt__ -y
      #     REM Overwrite the already copied binaries for standalone version
      #     copy /Y __qt__\imageformats\qjpeg.dll        imageformats\qjpeg.dll
      #     copy /Y __qt__\imageformats\qtga.dll         imageformats\qtga.dll
      #     copy /Y __qt__\imageformats\qwebp.dll        imageformats\qwebp.dll
      #     copy /Y __qt__\platforms\qwindows.dll        platforms\qwindows.dll
      #     copy /Y __qt__\styles\qwindowsvistastyle.dll styles\qwindowsvistastyle.dll
      #     copy /Y __qt__\Qt6Core.dll                   Qt6Core.dll
      #     copy /Y __qt__\Qt6Gui.dll                    Qt6Gui.dll
      #     copy /Y __qt__\Qt6Network.dll                Qt6Network.dll
      #     copy /Y __qt__\Qt6OpenGL.dll                 Qt6OpenGL.dll
      #     copy /Y __qt__\Qt6OpenGLWidgets.dll          Qt6OpenGLWidgets.dll
      #     copy /Y __qt__\Qt6Widgets.dll                Qt6Widgets.dll
      #     REM Overwrite the source of the binaries for installer version
      #     copy /Y __qt__\imageformats\qjpeg.dll        "${{github.workspace}}\qt\Qt\${{env.QT_VERSION_VPKEDIT}}\msvc2019_64\plugins\imageformats\qjpeg.dll"
      #     copy /Y __qt__\imageformats\qtga.dll         "${{github.workspace}}\qt\Qt\${{env.QT_VERSION_VPKEDIT}}\msvc2019_64\plugins\imageformats\qtga.dll"
      #     copy /Y __qt__\imageformats\qwebp.dll        "${{github.workspace}}\qt\Qt\${{env.QT_VERSION_VPKEDIT}}\msvc2019_64\plugins\imageformats\qwebp.dll"
      #     copy /Y __qt__\platforms\qwindows.dll        "${{github.workspace}}\qt\Qt\${{env.QT_VERSION_VPKEDIT}}\msvc2019_64\plugins\platforms\qwindows.dll"
      #     copy /Y __qt__\styles\qwindowsvistastyle.dll "${{github.workspace}}\qt\Qt\${{env.QT_VERSION_VPKEDIT}}\msvc2019_64\plugins\styles\qwindowsvistastyle.dll"
      #     copy /Y __qt__\Qt6Core.dll                   "${{github.workspace}}\qt\Qt\${{env.QT_VERSION_VPKEDIT}}\msvc2019_64\bin\Qt6Core.dll"
      #     copy /Y __qt__\Qt6Gui.dll                    "${{github.workspace}}\qt\Qt\${{env.QT_VERSION_VPKEDIT}}\msvc2019_64\bin\Qt6Gui.dll"
      #     copy /Y __qt__\Qt6Network.dll                "${{github.workspace}}\qt\Qt\${{env.QT_VERSION_VPKEDIT}}\msvc2019_64\bin\Qt6Network.dll"
      #     copy /Y __qt__\Qt6OpenGL.dll                 "${{github.workspace}}\qt\Qt\${{env.QT_VERSION_VPKEDIT}}\msvc2019_64\bin\Qt6OpenGL.dll"
      #     copy /Y __qt__\Qt6OpenGLWidgets.dll          "${{github.workspace}}\qt\Qt\${{env.QT_VERSION_VPKEDIT}}\msvc2019_64\bin\Qt6OpenGLWidgets.dll"
      #     copy /Y __qt__\Qt6Widgets.dll                "${{github.workspace}}\qt\Qt\${{env.QT_VERSION_VPKEDIT}}\msvc2019_64\bin\Qt6Widgets.dll"

      # - name: Archive Standalone Compatibility GUI [build_type:Release][target:VPKEdit]
      #   if: ${{matrix.build_type == 'Release' && matrix.target == 'VPKEdit'}}
      #   shell: bash
      #   run: |
      #     cd ${{env.BUILD_DIR}}
      #     zip -9 ${{matrix.target}}-Windows-Standalone-GUI-Compatibility-${{matrix.compiler}}-${{matrix.build_type}}.zip \
      #       CREDITS.md \
      #       LICENSE \
      #       vpkedit.exe \
      #       *.dll \
      #       imageformats/*.dll \
      #       platforms/*.dll \
      #       styles/*.dll \
      #       tls/*.dll 

      # - name: Upload Standalone Compatibility GUI [build_type:Release][target:VPKEdit]
      #   if: ${{matrix.build_type == 'Release' && matrix.target == 'VPKEdit'}}
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: '${{matrix.target}}-Windows-Standalone-GUI-Compatibility-${{matrix.compiler}}-${{matrix.build_type}}'
      #     path: |
      #       ${{matrix.target}}-Windows-Standalone-GUI-Compatibility-${{matrix.compiler}}-${{matrix.build_type}}.zip
      #     retention-days: 7

      # - name: Create Compatibility Installer [build_type:Release][target:VPKEdit]
      #   if: ${{matrix.build_type == 'Release' && matrix.target == 'VPKEdit'}}
      #   working-directory: ${{env.BUILD_DIR}}
      #   run: cpack

      # - name: Archive Compatibility Installer [build_type:Release][target:VPKEdit]
      #   if: ${{matrix.build_type == 'Release' && matrix.target == 'VPKEdit'}}
      #   shell: bash
      #   run: |
      #     cd ${{env.BUILD_DIR}}
      #     zip -9 ${{matrix.target}}-Windows-Installer-Compatibility-${{matrix.compiler}}-${{matrix.build_type}}.zip \
      #       VPKEdit-*-win64.exe  

      # - name: Upload Compatibility Installer [build_type:Release][target:VPKEdit]
      #   if: ${{matrix.build_type == 'Release' && matrix.target == 'VPKEdit'}}
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: '${{matrix.target}}-Windows-Installer-Compatibility-${{matrix.compiler}}-${{matrix.build_type}}'
      #     path: |
      #       ${{matrix.target}}-Windows-Installer-Compatibility-${{matrix.compiler}}-${{matrix.build_type}}.zip
      #     retention-days: 7

      # - name: Upload Standalone PDBs [target:VPKEdit]
      #   if: ${{matrix.target == 'VPKEdit'}}
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: '${{matrix.target}}-Windows-PDBs-${{matrix.compiler}}-${{matrix.build_type}}'
      #     path: |
      #       ${{env.BUILD_DIR}}/vpkeditcli.pdb
      #       ${{env.BUILD_DIR}}/vpkedit.pdb
      #     retention-days: 7

  # build-linux:
  #   strategy:
  #     matrix:
  #       build_type: [Debug, Release]
  #       compiler: [gcc]
  #       target: [VPKEdit, StrataSource]
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4
  #       with:
  #         submodules: recursive

  #     - name: Install Necessary Packages
  #       run: sudo apt update && sudo apt install -y cmake build-essential ninja-build chrpath

  #     - name: Install GCC [compiler:gcc]
  #       if: ${{matrix.compiler == 'gcc'}}
  #       uses: egor-tensin/setup-gcc@v1
  #       with:
  #         version: 11
  #         platform: x64

  #     - name: Install Qt [target:VPKEdit]
  #       if: ${{matrix.target == 'VPKEdit'}}
  #       uses: jurplel/install-qt-action@v3
  #       with:
  #         aqtversion: '==3.1.*'
  #         version: '${{env.QT_VERSION_VPKEDIT}}'
  #         host: 'linux'
  #         target: 'desktop'
  #         arch: 'gcc_64'
  #         dir: '${{github.workspace}}/qt'
  #         modules: ${{env.QT_MODULES}}
  #         cache: true

  #     - name: Install Qt [target:StrataSource]
  #       if: ${{matrix.target == 'StrataSource'}}
  #       uses: jurplel/install-qt-action@v3
  #       with:
  #         aqtversion: '==3.1.*'
  #         version: '${{env.QT_VERSION_STRATASOURCE}}'
  #         host: 'linux'
  #         target: 'desktop'
  #         arch: 'gcc_64'
  #         dir: '${{github.workspace}}/qt'
  #         modules: ${{env.QT_MODULES}}
  #         cache: true

  #     - name: Configure CMake [target:VPKEdit]
  #       if: ${{matrix.target == 'VPKEdit'}}
  #       run: cmake -G "Ninja" -B "${{env.BUILD_DIR}}" -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DQT_BASEDIR="${{github.workspace}}/qt/Qt/${{env.QT_VERSION_VPKEDIT}}/gcc_64" -DVPKEDIT_USE_LTO=ON

  #     - name: Configure CMake [target:StrataSource]
  #       if: ${{matrix.target == 'StrataSource'}}
  #       run: cmake -G "Ninja" -B "${{env.BUILD_DIR}}" -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DQT_BASEDIR="${{github.workspace}}/qt/Qt/${{env.QT_VERSION_STRATASOURCE}}/gcc_64" -DVPKEDIT_BUILD_FOR_STRATA_SOURCE=ON -DVPKEDIT_USE_LTO=ON

  #     - name: Build Binaries
  #       working-directory: '${{env.BUILD_DIR}}'
  #       run: |
  #         cmake --build . --config ${{matrix.build_type}} -t vpkeditcli -- -j$(nproc)
  #         cmake --build . --config ${{matrix.build_type}} -t vpkedit -- -j$(nproc)

  #     - name: Fixup Binaries
  #       run: |
  #         chmod +x '${{env.BUILD_DIR}}/vpkedit'
  #         chmod +x '${{env.BUILD_DIR}}/vpkeditcli'

  #         # runpath cleanup for the Qt binaries. These are (mostly) wrong, leading to crashes
  #         for f in ${{env.BUILD_DIR}}/*.so*; do
  #           echo "Fixing $f..."
  #           chrpath -r '$ORIGIN' "$f"
  #         done
  #         for f in ${{env.BUILD_DIR}}/*/*.so*; do
  #           echo "Fixing $f..."
  #           chrpath -r '$ORIGIN/..' "$f"
  #         done
      
  #     - name: Archive Standalone CLI [compiler:gcc][target:VPKEdit]
  #       if: ${{matrix.compiler == 'gcc' && matrix.target == 'VPKEdit'}}
  #       run: |
  #         cd ${{env.BUILD_DIR}}
  #         zip -9 ${{matrix.target}}-Linux-Standalone-CLI-${{matrix.compiler}}-${{matrix.build_type}}.zip \
  #         CREDITS.md \
  #         LICENSE \
  #         vpkeditcli

  #     - name: Upload Standalone CLI [compiler:gcc][target:VPKEdit]
  #       if: ${{matrix.compiler == 'gcc' && matrix.target == 'VPKEdit'}}
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: '${{matrix.target}}-Linux-Standalone-CLI-${{matrix.compiler}}-${{matrix.build_type}}'
  #         path: |
  #           ${{matrix.target}}-Linux-Standalone-CLI-${{matrix.compiler}}-${{matrix.build_type}}.zip
  #         retention-days: 7

  #     - name: Archive Standalone GUI [compiler:gcc][target:VPKEdit]
  #       if: ${{matrix.compiler == 'gcc' && matrix.target == 'VPKEdit'}}
  #       run: |
  #         cd ${{env.BUILD_DIR}}
  #         zip -9 ${{matrix.target}}-Linux-Standalone-GUI-${{matrix.compiler}}-${{matrix.build_type}}.zip \
  #         CREDITS.md \
  #         LICENSE \
  #         vpkedit \
  #         *.so* \
  #         egldeviceintegrations/*.so* \
  #         imageformats/*.so* \
  #         platforminputcontexts/*.so* \
  #         platforms/*.so* \
  #         platformthemes/*.so* \
  #         tls/*.so* \
  #         wayland-decoration-client/*.so* \
  #         wayland-graphics-integration-client/*.so* \
  #         wayland-shell-integration/*.so* \
  #         xcbglintegrations/*.so*
          
  #     - name: Upload Standalone GUI [compiler:gcc][target:VPKEdit]
  #       if: ${{matrix.compiler == 'gcc' && matrix.target == 'VPKEdit'}}
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: '${{matrix.target}}-Linux-Standalone-GUI-${{matrix.compiler}}-${{matrix.build_type}}'
  #         path: |
  #           ${{matrix.target}}-Linux-Standalone-GUI-${{matrix.compiler}}-${{matrix.build_type}}.zip
  #         retention-days: 7

  #     - name: Archive Standalone CLI/GUI [compiler:gcc][target:StrataSource]
  #       if: ${{matrix.compiler == 'gcc' && matrix.target == 'StrataSource'}}
  #       run: |
  #         cd ${{env.BUILD_DIR}}/
  #         zip -9 ${{matrix.target}}-Linux-Binaries-${{matrix.compiler}}-${{matrix.build_type}}.zip \
  #         vpkeditcli \
  #         vpkedit
        
  #     - name: Upload Standalone CLI/GUI [compiler:gcc][target:StrataSource]
  #       if: ${{matrix.compiler == 'gcc' && matrix.target == 'StrataSource'}}
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: '${{matrix.target}}-Linux-Binaries-${{matrix.compiler}}-${{matrix.build_type}}'
  #         path: |
  #           ${{matrix.target}}-Linux-Binaries-${{matrix.compiler}}-${{matrix.build_type}}.zip
  #         retention-days: 7

  #     - name: Create Installer [compiler:gcc][target:VPKEdit]
  #       if: ${{matrix.compiler == 'gcc' && matrix.target == 'VPKEdit'}}
  #       working-directory: ${{env.BUILD_DIR}}
  #       run: |
  #         cpack

  #     - name: Archive Installer [compiler:gcc][target:VPKEdit]
  #       if: ${{matrix.compiler == 'gcc' && matrix.target == 'VPKEdit'}}
  #       run: |
  #         cd ${{env.BUILD_DIR}}
  #         zip -9 ${{matrix.target}}-Linux-Installer-${{matrix.compiler}}-${{matrix.build_type}}.zip \
  #         VPKEdit-*-Linux.deb

  #     - name: Upload Installer [compiler:gcc][target:VPKEdit]
  #       if: ${{matrix.compiler == 'gcc' && matrix.target == 'VPKEdit'}}
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: '${{matrix.target}}-Linux-Installer-${{matrix.compiler}}-${{matrix.build_type}}'
  #         path: |
  #           ${{matrix.target}}-Linux-Installer-${{matrix.compiler}}-${{matrix.build_type}}.zip
  #         retention-days: 7

  # deploy:
  #   needs:
  #     - build-windows
  #     # - build-linux
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: write
  #   steps:
  #     - name: Download Artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         path: artifacts
  #         merge-multiple: true
  #         pattern: '*Release'
  #     - name: Upload Release
  #       uses: softprops/action-gh-release@v2
  #       with:
  #         files: | 
  #           artifacts/*.zip
  #         tag_name: draft
  #         draft: true
  #         make_latest: true
